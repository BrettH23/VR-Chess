# Software Engineering: VR-Chess
> Version 1.0 
> Prepared by Eric Smrkovsky
> California State University, Fresno
9/15/2022

## VR-Chess Team Members
| Team Member | Role | 
| -- | -- | 
| Eric Smrkovsky | Project Manager |  
| Christian Leon | Back End Developer |   
| Brett Harris | Graphics Design and Visuals |      
| Jose Fernando Jimenez Chavez | Lead Technical Designer |
| Jacob Miller | Front End Developer |            

Table of Contents
=================
  * [Revision History](#revision-history)
  * [Introduction](#1-introduction)
    * 1.1 [Purpose](#11-purpose)
    * 1.2 [Product Scope](#12-product-scope)
    * 1.3 [Intended Audience](#13-intended-audience)
    * 1.4 [Document Conventions](#14-document-conventions)
    * 1.5 [Glossary of Terms](#15-definitions)
  * [Overall Description](#overall-description)
    * 2.1 [Product Overview](#21-product-overview)
    * 2.2 [Product Functional Requirements](#22-product-functional-requirements)
    * 2.3 [Design and Implementation Constraints](#25-design-and-implementation-constraints)
    * 2.4 [Assumptions and Dependencies](#26-assumptions-and-dependencies)
  * [External Interface Requirements](#external-interface-requirements)
    * 3.1 [User Interfaces](#31-user-interfaces)
    * 3.2 [Hardware Interfaces](#32-hardware-interfaces)
    * 3.3 [Software Interfaces](#33-software-interfaces)
    * 3.4 [Communications Interfaces](#34-communications-interfaces)
  * [Other Nonfunctional Requirements](#other-nonfunctional-requirements)
    * 4.1 [Performance Requirements](#51-performance-requirements)
    * 4.2 [Safety Requirements](#52-safety-requirements)
    * 4.3 [Security Requirements](#53-security-requirements)
    * 4.4 [Software Quality Attributes](#54-software-quality-attributes)
    * 4.5 [Business Rules](#55-business-rules)


## Revision History
| Name        | Date       | Version   | Description
| ---- | ------- | ------------------- | --------- |
| Milestone one | 10/20/2022 | 1.0 | Scene with chairs, table, chess board, and movable pieces. No collision functionality.  |
|      |         |                     |           |
|      |         |                     |           |


## 1. Introduction
### 1.1 Purpose 
This version of VR-Chess is a web-based Virtual reality experience. The purpose of this document is to provide a detailed overview of the system requirements for VR-Chess Version 1.0. This document also gives an overall description of the software components used during the design and development phases.
### 1.2 Product Scope
This product aims to bring a fully functional chess game to a virtual setting for use by one or two players. VR Chess will benefit anyone who wants to experience a game of Chess in fully immersive virtual reality. VR_Chess will provide an outlet to practice Chess skills and communicate with Chess friends. The user experience will be of utmost importance when designing the look and feel of the VR Chess experience. The software development team for VR Chess will strive to create an experience that could be transitioned over to the upcoming Metaverse, providing competition for the first Chess experience on the platform. This look to the future value of Chess in the Metaverse brings the most value to potential investors.
### 1.3 Intended Audience
This document will be helpful to the clients and developers involved with developing and maintaining the VR-Chess software. It will provide a roadmap for the development team to follow when implementing the product's features. This System Requirements document looks into the development process for stakeholders and other relevant parties. 
### 1.4 Document Conventions
This document was designed to be submitted as a deliverable for a project submission in a college-level software engineering course. Some sections will pertain to specific project requirements, such as System Requirement Specification, Github Workflow Documentation, and Resources Learned. The highest level requirement in this document is described as a milestone. A milestone is a functional version containing requirements related to the features from within the scope of the specified version of VR-Chess.
### 1.5 Glossary of Terms
NAF -> Networked A-Frame
DFD -> Data Flow Diagram
FR -> Functional Requirement
NFR -> Non-Functional Requirement
UML -> Unified Modeling Language
DB -> DataBase
VR -> Virtual Reality

## Overall Description
### 2.1 Product Overview
This version of VR-Chess is a new self-contained product that utilizes the web browser on phones, tablets, computers, and headsets to play a game of chess over the internet in semi-immersive virtual reality. This game provides a simulated 3D environment using 3D graphics to give online chess play a realistic, immersive feel. The VR-Chess interface is simple and accessible by a wide range of devices, so players of all skill ranges can play. This software version is web-based to provide access to people who don't have access to VR-Headsets. This software version is strictly for two players, providing a virtual space for players to practice their chess skills with others online. This version of the VR-Chess experience is the WebVR-based component of a more extensive VR-Chess system (below) designed for use in the Metaverse.
![](https://github.com/Ericsmrk/VR-Chess/blob/main/images/larger_system.PNG)

### 2.2 Functional Requirement Overview
![](https://github.com/Ericsmrk/VR-Chess/blob/main/images/DFD0.PNG)This product functionality section summarizes the primary functional requirements the software must perform or must be present for the user to carry out the specific use case. These functional requirements are components within the Data Flow Diagram (highest level) shown above. More details and diagrams for each requirement will be provided in Section 3; only a high-level summary is available here. 
* FR1: Store User Information
    * Description: The software must be able to store user account details. 
    * Dependency: DB
* FR2: Account Creation
    * Description: The user must be able to create an account.
    * Dependency: FR1
* FR3: User Login 
    * Description: The user must be able to log in with a registered account.
    * Dependency: DB
* FR4: Store Password Securely
    * Description: The database must store the password securely.
    * Dependency: DB, FR3
* FR5: Multiple Environments
    * Description: The user must be able to choose from three or more choices for the VR environment.
    * Dependency: FR3
* FR6: Multiple Chess Board Designs
    * Description: The user must be able to choose from two or more Chess board designs available.
    * Dependency: FR3
* FR7: Choose Piece Color 
    * Description: The user must be able to choose from white, black, green, red, yellow, and blue for the piece color.
    * Dependency: FR3
* FR8: Viewable VR-Chess Instructions
    * Description: The user must be able to view the instructions for operating the game. 
    * Dependency: VR-Chess Instructions Document
* FR9: Viewable Chess Game Rules
    * Description: The user must be able to view the instructions for operating the game.
    * Dependency: Chess Game Rules Document
* FR10: Multiple Avatars
    * Description: The user must be able to choose from multiple avatars.
    * Dependency: FR3
* FR11: Store User Preferences
    * Description: The software must store the user's preferences. 
    * Dependency: FR5, FR6, FR7, FR10, DB
* FR12: Start VR Scene
    * Description: The user must be able to start the VR scene.
    *Dependency: FR5, FR6, FR7, FR10, FR13
* FR13: Access User Preferences
    * Description: The user must be able to choose to load saved preferences.
    * Dependency: FR5, FR6, FR7, FR10, FR11
* FR14: Record Game Move History
    * Description: The software must record all game moves for each game.
    * Dependency: F12, DB
* FR15: Store Game Move History Log
    * Description: The software must store the move log from each game.
    * Dependency: F12, DB
* FR16: View Game Logs
    * Description: The user must be able to view the record of all game logs.
    * Dependency: F12, DB
* FR17: Pause Menu
    * Description: The user must be able to pause the game, which triggers the menu.
    * Dependency: F12
* FR18: Pause Menu: View Game Logs
    * Description: The user must be able to select the option to view game logs from the pause menu.
    * Dependency: FR16, FR17, DB
* FR19: Pause Menu: Instructions
    * Description: The user must be able to select the option to view the VR-Chess Instructions document from the pause menu.
    * Dependency: FR8, FR17
* FR20: Pause Menu: Rules
    * Description: The user must be able to select the option to view the Chess Game Rules document from the pause menu.
    * Dependency: FR9, FR17
* FR21: Pause Menu: Quit Game
    * Description: The user must be able to select the option to quit the game from the pause menu.
    * Dependency: FR9, FR17
* FR:22 Control Avatar in Virtual Environment
    * Description: The user must be able to control the user's avatar with functionality for moving forward, backward, left, and right.
    * Dependency: FR12
* FR23: Take a Seat at Table  
    * Description: The user must be able to sit virtually at the chess table.
    * Dependency: FR22
* FR24: Board: Preset Positions of Pieces 
    * Description: The board must have the game pieces present when the user sits at the chess table.
    * Dependency: FR23
* FR25: Board Game Logic: King 
    * Description: King piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR26: Board Game Logic: Queen 
    * Description: Queen piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR27: Board Game Logic: Bishop  
    * Description: Bishop piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR28: Board Game Logic: Knight  
    * Description: Knight piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR29: Board Game Logic: Pawn  
    * Description: Pawn piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR30: Board Game Logic: Rook   
    * Description: Rook piece logic must be designed to follow the rules stated in the Chess Game Rules document.
    * Dependency: Chess Game Rules document
* FR31: Board: Piece Movement 
    * Description: The user must be able to move only one of their pieces when it is their turn.
    * Dependency: FR23, FR25-FR30
* FR32: Board Game Logic: Kill  
    * Description: The user must be able to make a legal chess kill. 
    * Dependency: FR25-FR31
* FR33: Board: Store Killed Pieces  
    * Description: The software must place all taken pieces neatly to the user's right on the virtual table.
    * Dependency: FR32
* FR34: Board: Red Square Highlight  
    * Description: When the user selects a square that is not a legal move, the square is highlighted red for two seconds.
    * Dependency: FR31
* FR35: Board: Green Square Highlight 
    * Description: When the user hovers over a square that is a legal move, the square is highlighted green until the square is selected.
    * Dependency: FR31
* FR36: Board Game Logic: King Death 
    * Description: The software will stop chess board piece movement when the death of a King piece occurs.
    * Dependency: FR32
* FR37: Board Game Logic: Detect Win 
    * Description: The software must notify the user when the game has been won.
    * Dependency: FR36
* FR38: Board Game Logic: Detect Loss 
    * Description: The software must notify the user when the game has been lost.
    * Dependency: FR36


<!---### 2.3 Design and Implementation Constraints
Describe any items or issues that will limit the options available to the developers. These might include: corporate or regulatory policies; hardware limitations (timing requirements, memory requirements); interfaces to other applications; specific technologies, tools, and databases to be used; parallel operations; language requirements; communications protocols; security considerations; design conventions or programming standards (for example, if the customer’s organization will be responsible for maintaining the delivered software).

### 2.4 Assumptions and Dependencies
List any assumed factors (as opposed to known facts) that could affect the requirements stated in the SRS. These could include third-party or commercial components that you plan to use, issues around the development or operating environment, or constraints. The project could be affected if these assumptions are incorrect, are not shared, or change. Also identify any dependencies the project has on external factors, such as software components that you intend to reuse from another project, unless they are already documented elsewhere (for example, in the vision and scope document or the project plan).
## Specific Requirements
### 3.1 External Interface Requirements
### 3.1.1 User Interfaces
Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., help) that will appear on every screen, keyboard shortcuts, error message display standards, and so on. Define the software components for which a user interface is needed. Details of the user interface design should be documented in a separate user interface specification.
### 3.1.2 Hardware Interfaces
Vr-Chess should work on VR headsets such as Vive, Rift, Windows Mixed Reality, Daydream, GearVR, Cardboard, Oculus Go, and others. The software should be backwards compatable between headsets and computers, tablets and mobile devices that are capable of using WebVR.

Describe control interactions! 
Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware, and communication protocols to be used.
### 3.1.3 Software Interfaces
Webxr
Describe the connections between this product and other specific software components (name and version), including databases, operating systems, tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Refer to documents that describe detailed application programming interface protocols. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.
### 3.2 Functional Requirements
### 3.3 UMl Diagrams
### 3.4 Database
## 4 Non-Functional Requirements
### 4.1 Performance Requirements
If there are performance requirements for the product under various circumstances, state them here and explain their rationale, to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional requirements or features.
### 4.2 Safety Requirements
Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of the product. Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to any external policies or regulations that state safety issues that affect the product’s design or use. Define any safety certifications that must be satisfied.
### 4.3 Security Requirements
service level aggreements
Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created by the product. Define any user identity authentication requirements. Refer to any external policies or regulations containing security issues that affect the product. Define any security or privacy certifications that must be satisfied.
### 4.4 Software Quality Attributes
Specify any additional quality characteristics for the product that will be important to either the customers or the developers. Some to consider are: adaptability, availability, correctness, flexibility, interoperability, maintainability, portability, reliability, reusability, robustness, testability, and usability. Write these to be specific, quantitative, and verifiable when possible. At the least, clarify the relative preferences for various attributes, such as ease of use over ease of learning.
4.4.1 Adaptability
4.4.2 Interoperability
4.5.3 Reliability
Specify the factors required to establish the required reliability of the software system at time of delivery.

4.4.4 Availability
Specify the factors required to guarantee a defined availability level for the entire system such as checkpoint, recovery, and restart.

3.5 Design and Implementation
3.5.1 Installation
Constraints to ensure that the software-to-be will run smoothly on the target implementation platform.
3.5.2 Distribution
Constraints on software components to fit the geographically distributed structure of the host organization, the distribution of data to be processed, or the distribution of devices to be controlled.

3.5.3 Maintainability
Specify attributes of software that relate to the ease of maintenance of the software itself. These may include requirements for certain modularity, interfaces, or complexity limitation. Requirements should not be placed here just because they are thought to be good design practices.

3.5.4 Reusability
3.5.5 Portability
Specify attributes of software that relate to the ease of porting the software to other host machines and/or operating systems.

3.5.6 Cost
Specify monetary cost of the software product.

3.5.7 Deadline
Specify schedule for delivery of the software product.

3.5.8 Proof of Concept


## 5. Appendixes
### 5.1 Process Documentation
https://www.altexsoft.com/blog/business/functional-and-non-functional-requirements-specification-and-types/
gant chart
technology roadmap  roadmap 
release plan(milestones)

... UX documentation: User Stories
...Testing documentation: Test plan, test cases
-->



